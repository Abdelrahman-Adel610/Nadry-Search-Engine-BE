import java.util.HashSet;
import java.util.Set;
import java.util.Date;

import com.mongodb.client.*;
import com.mongodb.client.model.*;
import org.bson.Document;

public class MongoJava {
	private static final String VISITED_URLS_COLLECTION = "visited_urls";
    private static final String QUEUED_URLS_COLLECTION = "queued_urls";
    private static final String COMPACT_STRING_COLLECTION = "compact_string";
    
    private final MongoClient mongoClient;
    private final MongoDatabase database;
    
    //	Cache to be used while being Crawling-active
    private Set<String> visitedUrlsCache = new HashSet<String>();
    private Set<String> compactStringCache = new HashSet<String>();
    
    public MongoJava(String connectionString, String dbName) {
    	this.mongoClient = MongoClients.create(connectionString);
        this.database = mongoClient.getDatabase(dbName);
    }
    
    private void initCollections() {
    	MongoCollection<Document> visitedCollection = database.getCollection(VISITED_URLS_COLLECTION);
    	MongoCollection<Document> queuedCollection = database.getCollection(QUEUED_URLS_COLLECTION);
    	MongoCollection<Document> compactCollection = database.getCollection(COMPACT_STRING_COLLECTION);
    	System.out.println("Collections got initialized");
    }
    
    private void loadCache() {
    	// Load visited URLs into cache
        MongoCollection<Document> visitedColl = database.getCollection(VISITED_URLS_COLLECTION);
        visitedUrlsCache.clear(); // Clear cache before loading
        MongoCursor<Document> cursor = visitedColl.find().projection(Projections.include("_id")).iterator();
            while (cursor.hasNext()) {
                visitedUrlsCache.add(cursor.next().getString("_id"));
            }

         System.out.println("Loaded " + visitedUrlsCache.size() + " visited URLs from MongoDB.");

        // Load signatures into cache
        MongoCollection<Document> sigsColl = database.getCollection(COMPACT_STRING_COLLECTION);
        compactStringCache.clear(); // Clear cache before loading
        cursor = sigsColl.find().projection(Projections.include("_id")).iterator();
            while (cursor.hasNext()) {
            	compactStringCache.add(cursor.next().getString("_id"));
            }
        
        System.out.println("Loaded " + compactStringCache.size() + " Compact Strings from MongoDB.");

        // Check queued size
        long queuedSize = database.getCollection(QUEUED_URLS_COLLECTION).countDocuments();
        System.out.println("Queued urls size in MongoDB: " + queuedSize);
    }
 
}
